#!/usr/bin/env python3
import pandas as pd
import sqlite3
import os

def update_grading_tables():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≥—Ä–µ–π–¥–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    try:
        print("üìã –ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≥—Ä–µ–π–¥–∏–Ω–≥–∞ –∏–∑ Excel...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        with sqlite3.connect('data/database.db') as conn:
            cursor = conn.cursor()
            
            # === –¢–ê–ë–õ–ò–¶–ê P1 ===
            print("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É P1...")
            df_p1 = pd.read_excel('data/hag.xlsx', sheet_name='p1')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É p1
            cursor.execute("DROP TABLE IF EXISTS grading_p1")
            cursor.execute("""
                CREATE TABLE grading_p1 (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    answer_q8 INTEGER,
                    answer_q9 INTEGER, 
                    answer_q10 INTEGER,
                    p1_value INTEGER
                )
            """)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É p1
            for _, row in df_p1.iterrows():
                cursor.execute("""
                    INSERT INTO grading_p1 (answer_q8, answer_q9, answer_q10, p1_value)
                    VALUES (?, ?, ?, ?)
                """, (
                    int(row.iloc[0]),  # –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 8
                    int(row.iloc[1]),  # –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 9  
                    int(row.iloc[2]),  # –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 10
                    int(row.iloc[3])   # –∑–Ω–∞—á–µ–Ω–∏–µ p1
                ))
            
            # === –¢–ê–ë–õ–ò–¶–ê P2 ===
            print("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É P2...")
            df_p2 = pd.read_excel('data/hag.xlsx', sheet_name='p2')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É p2
            cursor.execute("DROP TABLE IF EXISTS grading_p2")
            cursor.execute("""
                CREATE TABLE grading_p2 (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    answer_q11 INTEGER,
                    answer_q12 INTEGER,
                    p2_value INTEGER
                )
            """)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É p2
            for _, row in df_p2.iterrows():
                cursor.execute("""
                    INSERT INTO grading_p2 (answer_q11, answer_q12, p2_value)
                    VALUES (?, ?, ?)
                """, (
                    int(row.iloc[0]),  # –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 11
                    int(row.iloc[1]),  # –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 12
                    int(row.iloc[2])   # –∑–Ω–∞—á–µ–Ω–∏–µ p2
                ))
            
            # === –¢–ê–ë–õ–ò–¶–ê P3 ===
            print("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É P3...")
            df_p3 = pd.read_excel('data/hag.xlsx', sheet_name='p3')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É p3 (—Ç–∞–±–ª–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –ø–æ p1 –∏ p2)
            cursor.execute("DROP TABLE IF EXISTS grading_p3")
            cursor.execute("""
                CREATE TABLE grading_p3 (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    p1_value REAL,
                    p2_value INTEGER,
                    p3_value INTEGER
                )
            """)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É p3
            for _, row in df_p3.iterrows():
                cursor.execute("""
                    INSERT INTO grading_p3 (p1_value, p2_value, p3_value)
                    VALUES (?, ?, ?)
                """, (
                    float(row.iloc[0]),  # p1 –∑–Ω–∞—á–µ–Ω–∏–µ
                    int(row.iloc[1]),    # p2 –∑–Ω–∞—á–µ–Ω–∏–µ
                    int(row.iloc[2])     # p3 –∑–Ω–∞—á–µ–Ω–∏–µ
                ))
                
            # === –¢–ê–ë–õ–ò–¶–ê P4-14 ===
            print("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É P4-14...")
            df_p4_14 = pd.read_excel('data/hag.xlsx', sheet_name='p4-14')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É p4_14
            cursor.execute("DROP TABLE IF EXISTS grading_p4_14")
            cursor.execute("""
                CREATE TABLE grading_p4_14 (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    answer_q16 INTEGER,
                    answer_q13 INTEGER,
                    answer_q14 INTEGER,
                    p4_value INTEGER
                )
            """)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É p4_14
            for _, row in df_p4_14.iterrows():
                cursor.execute("""
                    INSERT INTO grading_p4_14 (answer_q16, answer_q13, answer_q14, p4_value)
                    VALUES (?, ?, ?, ?)
                """, (
                    int(row.iloc[0]),  # –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 16
                    int(row.iloc[1]),  # –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 13
                    int(row.iloc[2]),  # –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 14
                    int(row.iloc[3])   # –∑–Ω–∞—á–µ–Ω–∏–µ p4
                ))
                
            # === –¢–ê–ë–õ–ò–¶–ê P4-15 ===
            print("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É P4-15...")
            df_p4_15 = pd.read_excel('data/hag.xlsx', sheet_name='p4-15')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É p4_15
            cursor.execute("DROP TABLE IF EXISTS grading_p4_15")
            cursor.execute("""
                CREATE TABLE grading_p4_15 (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    answer_q16 INTEGER,
                    answer_q13 INTEGER,
                    answer_q15 INTEGER,
                    p4_value INTEGER
                )
            """)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É p4_15
            for _, row in df_p4_15.iterrows():
                cursor.execute("""
                    INSERT INTO grading_p4_15 (answer_q16, answer_q13, answer_q15, p4_value)
                    VALUES (?, ?, ?, ?)
                """, (
                    int(row.iloc[0]),  # –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 16
                    int(row.iloc[1]),  # –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 13
                    int(row.iloc[2]),  # –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 15
                    int(row.iloc[3])   # –∑–Ω–∞—á–µ–Ω–∏–µ p4
                ))
                
            # === –¢–ê–ë–õ–ò–¶–ê –ì–†–ï–ô–î ===
            print("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≥—Ä–µ–π–¥–æ–≤...")
            df_grade = pd.read_excel('data/hag.xlsx', sheet_name='–≥—Ä–µ–π–¥')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≥—Ä–µ–π–¥–æ–≤
            cursor.execute("DROP TABLE IF EXISTS grading_scale")
            cursor.execute("""
                CREATE TABLE grading_scale (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    low_bound INTEGER,
                    mid_point INTEGER,
                    high_bound INTEGER,
                    sber_grade TEXT
                )
            """)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≥—Ä–µ–π–¥–æ–≤
            for _, row in df_grade.iterrows():
                if pd.notna(row.iloc[0]):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    cursor.execute("""
                        INSERT INTO grading_scale (low_bound, mid_point, high_bound, sber_grade)
                        VALUES (?, ?, ?, ?)
                    """, (
                        int(row.iloc[0]),      # Low
                        int(row.iloc[1]),      # Mid point  
                        int(row.iloc[2]),      # High
                        str(row.iloc[3]) if pd.notna(row.iloc[3]) else None  # Sber Grade
                    ))
            
            conn.commit()
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≥—Ä–µ–π–¥–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            tables = ['grading_p1', 'grading_p2', 'grading_p3', 'grading_p4_14', 'grading_p4_15', 'grading_scale']
            for table in tables:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"üîç –¢–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    update_grading_tables()