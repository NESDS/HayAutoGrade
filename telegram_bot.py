import asyncio
from typing import List, Dict
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram import F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, BotCommand
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from database import Database
from config import TELEGRAM_BOT_TOKEN
from processing_agents import VerificationAgent, AnswerCompilerAgent, ClassificationAgent
from html_report_generator import HTMLReportGenerator
from llm_services import LLMFactory

class TelegramBot:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        self.db = Database()
        self.report_generator = HTMLReportGenerator()
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.active_sessions = {}
        
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.message.register(self.handle_message, ~F.text.startswith("/"))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        self.dp.callback_query.register(self.handle_adaptive_callback, F.data.startswith("q11_"))
        self.dp.callback_query.register(self.handle_adaptive_callback, F.data.startswith("q12_"))
        self.dp.callback_query.register(self.handle_restart_callback, F.data == "restart_from_q8")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ (–≤–æ–ø—Ä–æ—Å 18)
        self.dp.callback_query.register(self.handle_functionality_callback, F.data.startswith("func_"))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ LLM
        self.dp.callback_query.register(self.handle_llm_selection, F.data.startswith("llm_"))
    
    async def start_command(self, message: Message):
        """–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å"""
        user_id = message.from_user.id
        
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä LLM –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await self.show_llm_selection(message, user_id)
    
    async def show_llm_selection(self, message: Message, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä LLM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        text = """ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:

üá∑üá∫ **GigaChat** - —Ä–æ—Å—Å–∏–π—Å–∫–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –°–±–µ—Ä–∞
üá∫üá∏ **GPT-5** - OpenAI GPT-5 Chat Latest"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ GigaChat", callback_data="llm_gigachat")],
            [InlineKeyboardButton(text="üá∫üá∏ GPT-5", callback_data="llm_openai")]
        ])
        
        await message.answer(text, reply_markup=keyboard)
    
    async def handle_llm_selection(self, callback_query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ LLM"""
        user_id = callback_query.from_user.id
        llm_type = callback_query.data.split('_')[1]  # llm_gigachat -> gigachat
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
        service = LLMFactory.create_service(llm_type)
        selected_text = f"‚úÖ –í—ã–±—Ä–∞–Ω AI –ø–æ–º–æ—â–Ω–∏–∫: {service.emoji} **{service.name}**"
        
        try:
            await callback_query.message.edit_text(text=selected_text, reply_markup=None)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        await callback_query.answer(f"–í—ã–±—Ä–∞–Ω {service.name}!")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º LLM
        await self.start_survey_with_llm(callback_query.message, user_id, llm_type)
    
    async def start_survey_with_llm(self, message: Message, user_id: int, llm_type: str):
        """–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º LLM"""
        session_id = self.db.get_next_session_id(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        remaining_questions = self.db.get_remaining_questions(user_id, session_id)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = {
            'session_id': session_id,
            'remaining_questions': remaining_questions,
            'conversation': [],
            'llm_type': llm_type  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π LLM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
        self.active_sessions[user_id] = {
            'session_id': session_id,
            'state': state
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–æ–π LLM –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        service = LLMFactory.create_service(llm_type)
        await message.answer(f"üöÄ –ù–∞—á–∏–Ω–∞—é –æ–ø—Ä–æ—Å! (–°–µ—Å—Å–∏—è #{session_id})\nüí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {service.emoji} {service.name}")
        await self.send_next_question(message, user_id, session_id)
    
    def get_agents_for_user(self, user_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å –∞–≥–µ–Ω—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º LLM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø LLM –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        if user_id in self.active_sessions:
            llm_type = self.active_sessions[user_id]['state'].get('llm_type', 'gigachat')
        else:
            llm_type = 'gigachat'  # fallback –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        
        # –°–æ–∑–¥–∞–µ–º LLM —Å–µ—Ä–≤–∏—Å
        llm_service = LLMFactory.create_service(llm_type)
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç—ã —Å —ç—Ç–∏–º —Å–µ—Ä–≤–∏—Å–æ–º
        from processing_agents import FunctionalityAgent  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
        
        verification_agent = VerificationAgent(llm_service)
        answer_agent = AnswerCompilerAgent(llm_service)
        classification_agent = ClassificationAgent(llm_service)
        functionality_agent = FunctionalityAgent(llm_service)
        
        return {
            'verification': verification_agent,
            'answer': answer_agent,
            'classification': classification_agent,
            'functionality': functionality_agent
        }
    
    async def send_question(self, message: Message, question_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"""
        question_data = self.db.get_question(question_id)
        
        if question_data['answer_options']:
            options = [opt.strip() for opt in question_data['answer_options'].split(';')]
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=opt)] for opt in options],
                resize_keyboard=True
            )
            await message.answer(f"–í–æ–ø—Ä–æ—Å {question_id}: {question_data['question']}", reply_markup=keyboard)
        else:
            await message.answer(f"–í–æ–ø—Ä–æ—Å {question_id}: {question_data['question']}", reply_markup=ReplyKeyboardRemove())
    
    async def handle_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
        user_id = message.from_user.id
        user_answer = message.text
        
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{user_answer}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.active_sessions:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ /start")
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞")
            return
            
        session_data = self.active_sessions[user_id]
        session_id = session_data['session_id']
        state = session_data['state']
        
        print(f"üîç Active Session ID: {session_id}")
        print(f"üîç User state: {state}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞—é—Ç—Å—è –ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É (–≤–æ–ø—Ä–æ—Å 18)
        if state.get('awaiting_functionality_addition', False):
            await self.handle_functionality_addition(message, user_id, session_id, user_answer)
            return
        
        if not state:
            print("‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ /start")
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞")
            return
        
        if not state['remaining_questions']:
            await message.answer("üéâ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=ReplyKeyboardRemove())
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ –ø–∞–º—è—Ç–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ë–î
            if user_id in self.active_sessions:
                del self.active_sessions[user_id]
            return
            
        current_question = state['remaining_questions'][0]
        question_data = self.db.get_question(current_question)
        print(f"üîç Current question: {current_question}")
        print(f"üîç Question text: {question_data['question']}")
        print(f"üîç Conversation before: {state['conversation']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ conversation
        state['conversation'].append(user_answer)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
        self.active_sessions[user_id]['state'] = state
        
        print(f"üîç Conversation after: {state['conversation']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º LLM
        agents = self.get_agents_for_user(user_id)
        verification_agent = agents['verification']
        answer_agent = agents['answer'] 
        classification_agent = agents['classification']
        
        if question_data['answer_options']:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ä–µ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            portrait = self.db.get_session_portrait(user_id, session_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º typing indicator (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
            if question_data.get('classifier'):
                await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
            
            final_answer = classification_agent.classify_answer(question_data, user_answer, portrait)
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ state
            self.db.save_response(user_id, session_id, current_question, user_answer, final_answer, None)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.generate_user_portrait(user_id, session_id)
            
            # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            state['remaining_questions'] = self.db.get_remaining_questions(user_id, session_id)
            state['conversation'] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º conversation –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
            self.active_sessions[user_id]['state'] = state
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.db.save_user_state(user_id, session_id, state)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if question_data.get('classifier'):
                try:
                    level_number = int(final_answer)
                    hay_description = self.db.get_hay_level_description(current_question, level_number)
                    if hay_description:
                        await message.answer(f"üìä –û–ø—Ä–µ–¥–µ–ª—ë–Ω —É—Ä–æ–≤–µ–Ω—å {level_number}: {hay_description}")
                except (ValueError, TypeError):
                    pass  # –ï—Å–ª–∏ final_answer –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            
            await self.next_question(message, user_id, session_id)
        else:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            portrait = self.db.get_session_portrait(user_id, session_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º typing indicator
            await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
            
            is_accepted, response_text = verification_agent.process_answer(
                question_data, user_answer, state['conversation'], portrait
            )
            
            if is_accepted:
                # –ü–æ—Ä—Ç—Ä–µ—Ç —É–∂–µ –ø–æ–ª—É—á–µ–Ω –≤—ã—à–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                full_answer = answer_agent.create_full_answer(question_data, state['conversation'], portrait)
                final_answer = classification_agent.classify_answer(question_data, full_answer, portrait)
                
                # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ state + –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
                # –í –ø–æ–ª–µ answer –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –¥–∏–∞–ª–æ–≥–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                response_id, conflicts = self.db.save_response(user_id, session_id, current_question, full_answer, final_answer, None)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.db.generate_user_portrait(user_id, session_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
                if conflicts:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω)
                    first_conflict = conflicts[0]
                    await self.handle_conflict(message, user_id, session_id, first_conflict, state)
                    return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –∫–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω
                
                # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                state['remaining_questions'] = self.db.get_remaining_questions(user_id, session_id)
                state['conversation'] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º conversation –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
                self.active_sessions[user_id]['state'] = state
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.db.save_user_state(user_id, session_id, state)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É—Ä–æ–≤–Ω–µ–º HAY –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                response_message = f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! {response_text}"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
                if question_data.get('classifier'):
                    try:
                        level_number = int(final_answer)
                        hay_description = self.db.get_hay_level_description(current_question, level_number)
                        if hay_description:
                            response_message += f"\n\nüìä –û–ø—Ä–µ–¥–µ–ª—ë–Ω —É—Ä–æ–≤–µ–Ω—å {level_number}: {hay_description}"
                    except (ValueError, TypeError):
                        pass  # –ï—Å–ª–∏ final_answer –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                
                await message.answer(response_message)
                await self.next_question(message, user_id, session_id)
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞ –≤ conversation –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state['conversation'].append(response_text)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
                self.active_sessions[user_id]['state'] = state
                
                await message.answer(f"‚ùì {response_text}")
    
    async def handle_conflict(self, message: Message, user_id: int, session_id: int, 
                            conflict: Dict, state: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞"""
        from conflictator import ConflictDetector
        
        detector = ConflictDetector(self.db)
        
        # –ü–æ–ª—É—á–∞–µ–º LLM —Å–µ—Ä–≤–∏—Å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
        llm_type = state.get('llm_type', 'gigachat')
        llm = LLMFactory.create_service(llm_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        portrait = self.db.get_session_portrait(user_id, session_id)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        conflict_details = "‚ö†Ô∏è **–û–ë–ù–ê–†–£–ñ–ï–ù–û –ü–†–û–¢–ò–í–û–†–ï–ß–ò–ï –í –û–¢–í–ï–¢–ê–•**\n\n"
        conflict_details += "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É:\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
        user_responses = self.db.get_user_responses(user_id, session_id, only_active=True)
        response_map = {r['question']: r for r in user_responses}
        
        for i, q_info in enumerate(conflict['questions'], 1):
            question_id = q_info['question_id']
            question_text = q_info['question_text']
            answer_text = q_info.get('answer_text', '')  # –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ response_map
            if question_id in response_map:
                user_response = response_map[question_id]
                level = user_response['final_answer']
                
                conflict_details += f"**{i}. –í–æ–ø—Ä–æ—Å {question_id}:** {question_text}\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                if level and level.isdigit():
                    level_num = int(level)
                    conflict_details += f"   ‚îú‚îÄ üî¢ –£—Ä–æ–≤–µ–Ω—å {level_num}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                    if answer_text:
                        conflict_details += f": _{answer_text[:100]}{'...' if len(answer_text) > 100 else ''}_\n"
                    else:
                        conflict_details += "\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ HAY –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
                    try:
                        hay_desc = self.db.get_hay_level_description(question_id, level_num)
                        if hay_desc:
                            conflict_details += f"   ‚îî‚îÄ üìä HAY: _{hay_desc[:100]}{'...' if len(hay_desc) > 100 else ''}_\n"
                    except (ValueError, TypeError):
                        pass
                
                conflict_details += "\n"
        
        await message.answer(conflict_details)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º typing indicator
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        explanation_prompt = detector.generate_conflict_explanation(conflict, portrait)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç LLM (–∏—Å–ø–æ–ª—å–∑—É–µ–º task_type='explanation' –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
        messages = [{"role": "user", "content": explanation_prompt}]
        explanation = llm.generate_response(messages, task_type='explanation')
        
        print("üì• –ö–û–ù–§–õ–ò–ö–¢–ê–¢–û–† - –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM:")
        print("-" * 50)
        print(explanation)
        print("-" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–æ–≤, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
        conflicted_questions = conflict['question_ids']
        print(f"üîÑ –ö–û–ù–§–õ–ò–ö–¢–ê–¢–û–† - –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –æ—á–µ—Ä–µ–¥—å: {conflicted_questions}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ remaining (—Å —É—á–µ—Ç–æ–º –ø–æ–¥–≤–æ–ø—Ä–æ—Å–æ–≤)
        self.db.add_questions_to_remaining(user_id, session_id, conflicted_questions)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state['remaining_questions'] = self.db.get_remaining_questions(user_id, session_id)
        state['conversation'] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º conversation
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –∏ –ë–î
        self.active_sessions[user_id]['state'] = state
        self.db.save_user_state(user_id, session_id, state)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç LLM
        await message.answer(f"ü§ñ {explanation}")
        await message.answer(f"üîÑ –ü—Ä–µ–¥–ª–∞–≥–∞—é –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–Ω–æ–≤–æ...")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        await self.next_question(message, user_id, session_id)
    
    async def next_question(self, message: Message, user_id: int, session_id: int):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É"""
        await self.send_next_question(message, user_id, session_id)
    
    async def send_next_question(self, message: Message, user_id: int, session_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
        if user_id not in self.active_sessions:
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞")
            return
            
        state = self.active_sessions[user_id]['state']
        
        if state['remaining_questions']:
            next_question_id = state['remaining_questions'][0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ 11, 12 –∏–ª–∏ 18
            if next_question_id == 11:
                await self.send_adaptive_question_11(message, user_id, session_id)
            elif next_question_id == 12:
                await self.send_adaptive_question_12(message, user_id, session_id)
            elif next_question_id == 18:
                await self.send_adaptive_question_18(message, user_id, session_id)
            else:
                await self.send_question(message, next_question_id)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º remaining_questions
            self.db.save_user_state(user_id, session_id, state)
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ –ø–∞–º—è—Ç–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ë–î
            if user_id in self.active_sessions:
                del self.active_sessions[user_id]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            await self.generate_and_send_report(message, user_id, session_id)
    
    async def generate_and_send_report(self, message: Message, user_id: int, session_id: int):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –æ—Ç—á–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await message.answer("üéâ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –æ—Ç—á–µ—Ç...", reply_markup=ReplyKeyboardRemove())
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
            report_path = self.report_generator.save_report_to_file(
                user_id=user_id, 
                session_id=session_id,
                output_path=f"reports/report_user_{user_id}_session_{session_id}.html"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from aiogram.types import FSInputFile
            document = FSInputFile(report_path)
            
            await message.answer_document(
                document=document,
                caption=f"üìä –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–ø—Ä–æ—Å—É\n"
                       f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: #{user_id}\n"
                       f"üìã –°–µ—Å—Å–∏—è: #{session_id}\n"
                       f"üìÖ –î–∞—Ç–∞: {self._get_current_datetime()}"
            )
            
            await message.answer("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ.")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    
    async def send_adaptive_question_11(self, message: Message, user_id: int, session_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ 11 —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ P1"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π P1
            from grade_calculator import GradeCalculator
            calculator = GradeCalculator()
            p1_value = calculator.calculate_intermediate_p1(user_id, session_id)
            
            if p1_value is None:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å P1, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è Q8,Q9,Q10")
                await self.show_missing_p1_options(message, user_id, session_id)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è Q11
            variants = self.db.get_question_variants(11, p1_value)
            question_data = self.db.get_question(11)
            
            if not variants:
                print("‚ö†Ô∏è –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è Q11, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É")
                await self.send_question(message, 11)
                return
            
            # –£–±–∏—Ä–∞–µ–º Q11 –∏–∑ remaining_questions
            state = self.active_sessions[user_id]['state']
            if 11 in state['remaining_questions']:
                state['remaining_questions'].remove(11)
            self.active_sessions[user_id]['state'] = state
            
            # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ –±—ã–ª–∞)
            await message.answer("‚è≥", reply_markup=ReplyKeyboardRemove())
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if len(variants) == 1:
                text = self._format_single_variant_message(question_data, p1_value, variants[0])
                keyboard = self._create_single_variant_keyboard(variants[0], 11)
            else:
                text = self._format_multiple_variants_message(question_data, p1_value, variants)
                keyboard = self._create_multiple_variants_keyboard(variants, 11)
            
            await message.answer(text, reply_markup=keyboard)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–º Q11: {e}")
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–≥–∏–∫–µ
            await self.send_question(message, 11)
    
    def _format_single_variant_message(self, question_data: Dict, p1_value: int, variant: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        return f"""–í–æ–ø—Ä–æ—Å {question_data['id']}: {question_data['question']}

üîç –ò—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ (P1 = {p1_value}), –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:

üìã {variant['variant_text']}

–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã —Å —ç—Ç–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º?"""

    def _format_multiple_variants_message(self, question_data: Dict, p1_value: int, variants: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        text = f"""–í–æ–ø—Ä–æ—Å {question_data['id']}: {question_data['question']}

üîç –ò—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ (P1 = {p1_value}), –≤–æ–∑–º–æ–∂–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:

"""
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        for variant in variants:
            text += f"üìã {variant['variant_text']}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"
        return text

    def _create_single_variant_keyboard(self, variant: Dict, question_num: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        buttons = [
            [InlineKeyboardButton(
                text=f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç {variant['answer_value']}", 
                callback_data=f"q{question_num}_accept_{variant['answer_value']}"
            )],
            [InlineKeyboardButton(
                text="üîÑ –ü–µ—Ä–µ–æ—Ç–≤–µ—Ç–∏—Ç—å —Å 8-–≥–æ –≤–æ–ø—Ä–æ—Å–∞", 
                callback_data="restart_from_q8"
            )]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    def _create_multiple_variants_keyboard(self, variants: List[Dict], question_num: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ - —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞
        for variant in variants:
            buttons.append([InlineKeyboardButton(
                text=f"{variant['answer_value']}",  # –¢–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä
                callback_data=f"q{question_num}_select_{variant['answer_value']}"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å–¥–∞—á–∏
        buttons.append([InlineKeyboardButton(
            text="üîÑ –ü–µ—Ä–µ–æ—Ç–≤–µ—Ç–∏—Ç—å —Å 8-–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
            callback_data="restart_from_q8"
        )])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    async def handle_adaptive_callback(self, callback_query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        data = callback_query.data
        user_id = callback_query.from_user.id
        
        if user_id not in self.active_sessions:
            await callback_query.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start")
            return
        
        session_id = self.active_sessions[user_id]['session_id']
        
        try:
            # –ü–∞—Ä—Å–∏–º callback_data: "q11_accept_2" –∏–ª–∏ "q11_select_3"
            parts = data.split('_')
            question_num = int(parts[0][1:])  # q11 -> 11
            action = parts[1]  # accept –∏–ª–∏ select
            answer_value = int(parts[2])  # –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞
            variant_text = self._get_variant_text_by_value(question_num, answer_value, user_id, session_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ë–ï–ó –≤—ã–∑–æ–≤–∞ –∞–≥–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            response_id, conflicts = self.db.save_response(
                user=user_id,
                session_id=session_id,
                question=question_num,
                answer=variant_text,
                final_answer=str(answer_value),  # –°—Ä–∞–∑—É —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                user_state=None
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.generate_user_portrait(user_id, session_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            if conflicts:
                state = self.active_sessions[user_id]['state']
                await self.handle_conflict(callback_query.message, user_id, session_id, conflicts[0], state)
                return
            
            await callback_query.answer("‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!")
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await callback_query.message.edit_reply_markup(reply_markup=None)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            selected_text = f"‚úÖ **–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç:**\n\nüìã {variant_text}"
            await callback_query.message.answer(selected_text)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            if question_num == 11:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–º—É Q12
                await self.send_adaptive_question_12(callback_query.message, user_id, session_id)
            else:
                # Q12 –∑–∞–≤–µ—Ä—à—ë–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–π –ª–æ–≥–∏–∫–µ
                await self.next_question(callback_query.message, user_id, session_id)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def handle_restart_callback(self, callback_query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–¥–∞—á–∏ —Å 8-–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        user_id = callback_query.from_user.id
        
        if user_id not in self.active_sessions:
            await callback_query.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        session_id = self.active_sessions[user_id]['session_id']
        
        try:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã 8-12
            self.db.reset_questions_from_8(user_id, session_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state = self.active_sessions[user_id]['state']
            state['remaining_questions'] = self.db.get_remaining_questions(user_id, session_id)
            state['conversation'] = []
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.active_sessions[user_id]['state'] = state
            self.db.save_user_state(user_id, session_id, state)
            
            await callback_query.answer("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ —Å 8-–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await callback_query.message.edit_text(
                    text="üîÑ –ü–µ—Ä–µ—Å–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å—ã —Å 8-–≥–æ...",
                    reply_markup=None
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            await callback_query.message.answer("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ—Å–¥–∞–¥–∏–º –≤–æ–ø—Ä–æ—Å—ã —Å 8-–≥–æ.", 
                                               reply_markup=ReplyKeyboardRemove())
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É 8
            await self.send_next_question(callback_query.message, user_id, session_id)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–¥–∞—á–∏: {e}")
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def handle_functionality_callback(self, callback_query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ (–≤–æ–ø—Ä–æ—Å 18)"""
        user_id = callback_query.from_user.id
        
        if user_id not in self.active_sessions:
            await callback_query.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        session_id = self.active_sessions[user_id]['session_id']
        
        try:
            if callback_query.data == "func_accept_18":
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
                message_text = callback_query.message.text
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–µ–∂–¥—É "—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:" –∏ "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
                start_marker = "—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n\n"
                end_marker = "\n\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
                
                start_pos = message_text.find(start_marker)
                end_pos = message_text.find(end_marker)
                
                if start_pos != -1 and end_pos != -1:
                    functionality = message_text[start_pos + len(start_marker):end_pos].strip()
                else:
                    functionality = "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç –∫–∞–∫ –µ—Å—Ç—å"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 18
                self.db.save_response(user_id, session_id, 18, functionality, functionality, None)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.db.generate_user_portrait(user_id, session_id)
                
                # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π
                state = self.active_sessions[user_id]['state']
                state['awaiting_functionality_addition'] = False
                state.pop('generated_functionality', None)
                self.active_sessions[user_id]['state'] = state
                
                # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç
                try:
                    await callback_query.message.edit_text(
                        text=f"‚úÖ **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç:**\n\n{functionality}",
                        reply_markup=None
                    )
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
                await callback_query.answer("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç!")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                await self.send_next_question(callback_query.message, user_id, session_id)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞: {e}")
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def handle_functionality_addition(self, message: Message, user_id: int, session_id: int, addition_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É"""
        try:
            state = self.active_sessions[user_id]['state']
            generated_functionality = state.get('generated_functionality', '')
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            full_functionality = f"{generated_functionality}\n\n**–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è:**\n{addition_text}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 18
            self.db.save_response(user_id, session_id, 18, full_functionality, full_functionality, None)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.generate_user_portrait(user_id, session_id)
            
            # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π
            state['awaiting_functionality_addition'] = False
            state.pop('generated_functionality', None)
            self.active_sessions[user_id]['state'] = state
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π
            await message.answer(f"‚úÖ **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å –≤–∞—à–∏–º–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏:**\n\n{full_functionality}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            await self.send_next_question(message, user_id, session_id)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π")

    def _get_variant_text_by_value(self, question_num: int, answer_value: int, user_id: int, session_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –æ—Ç–≤–µ—Ç–∞"""
        try:
            from grade_calculator import GradeCalculator
            calculator = GradeCalculator()
            p1_value = calculator.calculate_intermediate_p1(user_id, session_id)
            
            if p1_value is not None:
                variants = self.db.get_question_variants(question_num, p1_value)
                
                for variant in variants:
                    if variant['answer_value'] == answer_value:
                        return variant['variant_text']
            
            return f"–í–∞—Ä–∏–∞–Ω—Ç {answer_value}"  # Fallback
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {e}")
            return f"–í–∞—Ä–∏–∞–Ω—Ç {answer_value}"

    async def send_adaptive_question_12(self, message: Message, user_id: int, session_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ 12 —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å —É—á–µ—Ç–æ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ Q11"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π P1
            from grade_calculator import GradeCalculator
            calculator = GradeCalculator()
            p1_value = calculator.calculate_intermediate_p1(user_id, session_id)
            
            if p1_value is None:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å P1 –¥–ª—è Q12, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è Q8,Q9,Q10")
                await self.show_missing_p1_options(message, user_id, session_id)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ Q11 –∏–∑ –ë–î
            user_responses = self.db.get_user_responses(user_id, session_id)
            q11_answer = None
            
            for response in user_responses:
                if response['question'] == 11:  # question –Ω–æ–º–µ—Ä 11
                    q11_final_answer = response['final_answer']  # final_answer
                    try:
                        q11_answer = int(q11_final_answer)
                        break
                    except (ValueError, TypeError):
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç Q11 –≤ —á–∏—Å–ª–æ: {q11_final_answer}")
                        continue
            
            if q11_answer is None:
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ Q11, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É")
                await self.send_question(message, 12)
                return
            
            print(f"üîç –î–ª—è Q12: P1={p1_value}, Q11_answer={q11_answer}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è Q12 —Å —É—á–µ—Ç–æ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ Q11
            variants = self.db.get_question_variants(12, p1_value, q11_answer)
            question_data = self.db.get_question(12)
            
            if not variants:
                print("‚ö†Ô∏è –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è Q12, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É")
                await self.send_question(message, 12)
                return
            
            # –£–±–∏—Ä–∞–µ–º Q12 –∏–∑ remaining_questions
            state = self.active_sessions[user_id]['state']
            if 12 in state['remaining_questions']:
                state['remaining_questions'].remove(12)
            self.active_sessions[user_id]['state'] = state
            
            # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ –±—ã–ª–∞)
            await message.answer("‚è≥", reply_markup=ReplyKeyboardRemove())
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if len(variants) == 1:
                text = self._format_single_variant_message(question_data, p1_value, variants[0])
                keyboard = self._create_single_variant_keyboard(variants[0], 12)
            else:
                text = self._format_multiple_variants_message(question_data, p1_value, variants)
                keyboard = self._create_multiple_variants_keyboard(variants, 12)
            
            await message.answer(text, reply_markup=keyboard)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–º Q12: {e}")
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–≥–∏–∫–µ
            await self.send_question(message, 12)
    
    async def send_adaptive_question_18(self, message: Message, user_id: int, session_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ 18 —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            portrait = self.db.get_session_portrait(user_id, session_id)
            
            if not portrait:
                print("‚ö†Ô∏è –ü–æ—Ä—Ç—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É")
                await self.send_question(message, 18)
                return
            
            # –°–æ–∑–¥–∞–µ–º FunctionalityAgent
            agents = self.get_agents_for_user(user_id)
            functionality_agent = agents['functionality']
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º typing indicator
            await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
            generated_functionality = functionality_agent.generate_functionality(portrait)
            
            # –£–±–∏—Ä–∞–µ–º Q18 –∏–∑ remaining_questions –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
            state = self.active_sessions[user_id]['state']
            if 18 in state['remaining_questions']:
                state['remaining_questions'].remove(18)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É
            state['awaiting_functionality_addition'] = True
            state['generated_functionality'] = generated_functionality
            self.active_sessions[user_id]['state'] = state
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
            question_data = self.db.get_question(18)
            
            # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            await message.answer("‚è≥", reply_markup=ReplyKeyboardRemove())
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = f"üìã **{question_data['question']}**\n\n"
            text += f"–ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n\n"
            text += f"{generated_functionality}\n\n"
            text += f"–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö. "
            text += f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∫–∞–∫ –µ—Å—Ç—å\", –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–¥—Ö–æ–¥–∏—Ç."
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data=f"func_accept_18")]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–æ–π
            await message.answer(text, reply_markup=keyboard)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–º Q18: {e}")
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–≥–∏–∫–µ
            await self.send_question(message, 18)
    
    async def show_missing_p1_options(self, message: Message, user_id: int, session_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –æ—Ç–≤–µ—Ç—ã –Ω–∞ Q8,Q9,Q10 –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ—Å–¥–∞—Ç—å"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ Q8, Q9, Q10
            responses = self.db.get_user_responses(user_id, session_id)
            q8_q9_q10_answers = {}
            
            for r in responses:
                if r['question'] in [8, 9, 10]:
                    q8_q9_q10_answers[r['question']] = {
                        'answer': r['answer'],
                        'final_answer': r['final_answer']
                    }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
            text = """‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.

üìã –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã:"""
            
            answers_for_p1 = []
            for q_num in [8, 9, 10]:
                if q_num in q8_q9_q10_answers:
                    answer_info = q8_q9_q10_answers[q_num]
                    final = answer_info['final_answer'] or answer_info['answer']
                    text += f"\n‚Ä¢ –í–æ–ø—Ä–æ—Å {q_num}: {final}"
                    answers_for_p1.append(final)
                else:
                    text += f"\n‚Ä¢ –í–æ–ø—Ä–æ—Å {q_num}: (–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)"
                    answers_for_p1.append("–Ω–µ —É–∫–∞–∑–∞–Ω")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ P1
            if len(answers_for_p1) == 3:
                text += f"\n\n‚ö†Ô∏è –ö–æ–º–±–∏–Ω–∞—Ü–∏—è Q8={answers_for_p1[0]}, Q9={answers_for_p1[1]}, Q10={answers_for_p1[2]} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ P1."
            
            text += "\n\nüîÑ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ—Å–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã 8-10 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Å–¥–∞—á–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîÑ –ü–µ—Ä–µ–æ—Ç–≤–µ—Ç–∏—Ç—å —Å 8-–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
                    callback_data="restart_from_q8"
                )]
            ])
            
            await message.answer(text, reply_markup=keyboard)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_missing_p1_options: {e}")
            # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîÑ –ü–µ—Ä–µ–æ—Ç–≤–µ—Ç–∏—Ç—å —Å 8-–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
                    callback_data="restart_from_q8"
                )]
            ])
            
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤.\n\nüîÑ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ—Å–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å 8-–≥–æ.",
                reply_markup=keyboard
            )
    
    def _get_current_datetime(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        from datetime import datetime
        return datetime.now().strftime("%d.%m.%Y %H:%M")
    
    async def setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å")
        ]
        await self.bot.set_my_commands(commands)

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.setup_bot_commands()
        await self.dp.start_polling(self.bot)

async def main():
    bot = TelegramBot()
    await bot.start_polling()

if __name__ == "__main__":
    asyncio.run(main()) 