import asyncio
from typing import List, Dict
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram import F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, BotCommand

from database import Database
from config import TELEGRAM_BOT_TOKEN
from processing_agents import verification_agent, answer_agent, classification_agent
from html_report_generator import HTMLReportGenerator

class TelegramBot:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        self.db = Database()
        self.report_generator = HTMLReportGenerator()
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.active_sessions = {}
        
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.message.register(self.handle_message, ~F.text.startswith("/"))
    
    async def start_command(self, message: Message):
        """–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å"""
        user_id = message.from_user.id
        session_id = self.db.get_next_session_id(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        remaining_questions = self.db.get_remaining_questions(user_id, session_id)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = {
            'session_id': session_id,
            'remaining_questions': remaining_questions,
            'conversation': []
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
        self.active_sessions[user_id] = {
            'session_id': session_id,
            'state': state
        }
        
        await message.answer(f"–ù–∞—á–∏–Ω–∞—é –æ–ø—Ä–æ—Å! (–°–µ—Å—Å–∏—è #{session_id})")
        await self.send_next_question(message, user_id, session_id)
    
    async def send_question(self, message: Message, question_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"""
        question_data = self.db.get_question(question_id)
        
        if question_data['answer_options']:
            options = [opt.strip() for opt in question_data['answer_options'].split(';')]
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=opt)] for opt in options],
                resize_keyboard=True
            )
            await message.answer(f"–í–æ–ø—Ä–æ—Å {question_id}: {question_data['question']}", reply_markup=keyboard)
        else:
            await message.answer(f"–í–æ–ø—Ä–æ—Å {question_id}: {question_data['question']}", reply_markup=ReplyKeyboardRemove())
    
    async def handle_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
        user_id = message.from_user.id
        user_answer = message.text
        
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{user_answer}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.active_sessions:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ /start")
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞")
            return
            
        session_data = self.active_sessions[user_id]
        session_id = session_data['session_id']
        state = session_data['state']
        
        print(f"üîç Active Session ID: {session_id}")
        print(f"üîç User state: {state}")
        
        if not state:
            print("‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ /start")
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞")
            return
        
        if not state['remaining_questions']:
            await message.answer("üéâ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=ReplyKeyboardRemove())
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ –ø–∞–º—è—Ç–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ë–î
            if user_id in self.active_sessions:
                del self.active_sessions[user_id]
            return
            
        current_question = state['remaining_questions'][0]
        question_data = self.db.get_question(current_question)
        print(f"üîç Current question: {current_question}")
        print(f"üîç Question text: {question_data['question']}")
        print(f"üîç Conversation before: {state['conversation']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ conversation
        state['conversation'].append(user_answer)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
        self.active_sessions[user_id]['state'] = state
        
        print(f"üîç Conversation after: {state['conversation']}")
        
        if question_data['answer_options']:
            final_answer = classification_agent.classify_answer(question_data, user_answer)
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ state
            self.db.save_response(user_id, session_id, current_question, user_answer, final_answer, None)
            
            # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            state['remaining_questions'] = self.db.get_remaining_questions(user_id, session_id)
            state['conversation'] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º conversation –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
            self.active_sessions[user_id]['state'] = state
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.db.save_user_state(user_id, session_id, state)
            
            await self.next_question(message, user_id, session_id)
        else:
            is_accepted, response_text = verification_agent.process_answer(
                question_data, user_answer, state['conversation']
            )
            
            if is_accepted:
                full_answer = answer_agent.create_full_answer(question_data, state['conversation'])
                final_answer = classification_agent.classify_answer(question_data, full_answer)
                
                # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ state + –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
                # –í –ø–æ–ª–µ answer –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –¥–∏–∞–ª–æ–≥–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                response_id, conflicts = self.db.save_response(user_id, session_id, current_question, full_answer, final_answer, None)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
                if conflicts:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω)
                    first_conflict = conflicts[0]
                    await self.handle_conflict(message, user_id, session_id, first_conflict, state)
                    return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –∫–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω
                
                # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                state['remaining_questions'] = self.db.get_remaining_questions(user_id, session_id)
                state['conversation'] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º conversation –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
                self.active_sessions[user_id]['state'] = state
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.db.save_user_state(user_id, session_id, state)
                
                await message.answer(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! {response_text}")
                await self.next_question(message, user_id, session_id)
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞ –≤ conversation –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state['conversation'].append(response_text)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
                self.active_sessions[user_id]['state'] = state
                
                await message.answer(f"‚ùì {response_text}")
    
    async def handle_conflict(self, message: Message, user_id: int, session_id: int, 
                            conflict: Dict, state: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞"""
        from conflictator import ConflictDetector
        from llm_service import LLMService
        
        detector = ConflictDetector(self.db)
        llm = LLMService()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        explanation_prompt = detector.generate_conflict_explanation(conflict)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç LLM
        messages = [{"role": "user", "content": explanation_prompt}]
        explanation = llm.generate_response(messages)
        
        print("üì• –ö–û–ù–§–õ–ò–ö–¢–ê–¢–û–† - –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM:")
        print("-" * 50)
        print(explanation)
        print("-" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–æ–≤, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
        conflicted_questions = conflict['question_ids']
        print(f"üîÑ –ö–û–ù–§–õ–ò–ö–¢–ê–¢–û–† - –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –æ—á–µ—Ä–µ–¥—å: {conflicted_questions}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ remaining (—Å —É—á–µ—Ç–æ–º –ø–æ–¥–≤–æ–ø—Ä–æ—Å–æ–≤)
        self.db.add_questions_to_remaining(user_id, session_id, conflicted_questions)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state['remaining_questions'] = self.db.get_remaining_questions(user_id, session_id)
        state['conversation'] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º conversation
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –∏ –ë–î
        self.active_sessions[user_id]['state'] = state
        self.db.save_user_state(user_id, session_id, state)
        
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
        await message.answer(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –≤ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö!")
        await message.answer(f"ü§ñ {explanation}")
        await message.answer(f"üîÑ –ü—Ä–µ–¥–ª–∞–≥–∞—é –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–Ω–æ–≤–æ...")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        await self.next_question(message, user_id, session_id)
    
    async def next_question(self, message: Message, user_id: int, session_id: int):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É"""
        await self.send_next_question(message, user_id, session_id)
    
    async def send_next_question(self, message: Message, user_id: int, session_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
        if user_id not in self.active_sessions:
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞")
            return
            
        state = self.active_sessions[user_id]['state']
        
        if state['remaining_questions']:
            next_question_id = state['remaining_questions'][0]
            await self.send_question(message, next_question_id)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º remaining_questions
            self.db.save_user_state(user_id, session_id, state)
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ –ø–∞–º—è—Ç–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ë–î
            if user_id in self.active_sessions:
                del self.active_sessions[user_id]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            await self.generate_and_send_report(message, user_id, session_id)
    
    async def generate_and_send_report(self, message: Message, user_id: int, session_id: int):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –æ—Ç—á–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await message.answer("üéâ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –æ—Ç—á–µ—Ç...", reply_markup=ReplyKeyboardRemove())
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
            report_path = self.report_generator.save_report_to_file(
                user_id=user_id, 
                session_id=session_id,
                output_path=f"reports/report_user_{user_id}_session_{session_id}.html"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from aiogram.types import FSInputFile
            document = FSInputFile(report_path)
            
            await message.answer_document(
                document=document,
                caption=f"üìä –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–ø—Ä–æ—Å—É\n"
                       f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: #{user_id}\n"
                       f"üìã –°–µ—Å—Å–∏—è: #{session_id}\n"
                       f"üìÖ –î–∞—Ç–∞: {self._get_current_datetime()}"
            )
            
            await message.answer("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ.")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    
    def _get_current_datetime(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        from datetime import datetime
        return datetime.now().strftime("%d.%m.%Y %H:%M")
    
    async def setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å")
        ]
        await self.bot.set_my_commands(commands)

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.setup_bot_commands()
        await self.dp.start_polling(self.bot)

async def main():
    bot = TelegramBot()
    await bot.start_polling()

if __name__ == "__main__":
    asyncio.run(main()) 