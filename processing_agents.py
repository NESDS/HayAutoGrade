from typing import Dict, List, Tuple
from llm_services import BaseLLMService

class VerificationAgent:
    def __init__(self, llm_service: BaseLLMService):
        self.llm_service = llm_service
    
    def process_answer(self, question_data: Dict, user_answer: str, conversation: List[str], user_portrait: str = None) -> Tuple[bool, str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ + —É—Ç–æ—á–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
        dialog_text = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_portrait:
            dialog_text += f"–ö–û–ù–¢–ï–ö–°–¢ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã):\n{user_portrait}\n\n"
            dialog_text += "–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
            dialog_text += "- –°—Å—ã–ª–∞–π—Å—è –Ω–∞ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            dialog_text += "- –ï—Å–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è —Ç–µ–∫—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É - –ø–æ–¥—Å–≤–µ—Ç–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
            dialog_text += "- –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
            dialog_text += "- –ü—Ä–æ–≤–µ—Ä—è–π –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö\n\n"
        
        dialog_text += "–¢–ï–ö–£–©–ò–ô –î–ò–ê–õ–û–ì –ü–û –í–û–ü–†–û–°–£:\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞
        dialog_text += f"–ë–æ—Ç: {question_data['question']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å –¥–∏–∞–ª–æ–≥ (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –≤ conversation)
        for i, msg in enumerate(conversation):
            if i % 2 == 0:  # —á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã - –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                dialog_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg}\n"
            else:  # –Ω–µ—á–µ—Ç–Ω—ã–µ - –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞
                dialog_text += f"–ë–æ—Ç: {msg}\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥
        prompt = question_data['verification_instruction'].format(dialog=dialog_text)

        print("üîç –í–ï–†–ò–§–ò–ö–ê–¢–û–† - –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ LLM:")
        print("-" * 50)
        print(prompt)
        print("-" * 50)
        
        messages = [{"role": "user", "content": prompt}]
        response = self.llm_service.generate_response(messages, task_type='verification')
        
        print("‚úÖ –û–¢–í–ï–¢ LLM:")
        print(response)
        print("-" * 50)
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥
        if "–ü–†–ò–ù–Ø–¢–û" in response.upper():
            return True, "–û—Ç–ª–∏—á–Ω–æ!"
        else:
            return False, response.replace("–£–¢–û–ß–ù–ò:", "").strip()

class AnswerCompilerAgent:
    def __init__(self, llm_service: BaseLLMService):
        self.llm_service = llm_service
    
    def create_full_answer(self, question_data: Dict, conversation: List[str], user_portrait: str = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        user_answers = []
        for i, msg in enumerate(conversation):
            if i % 2 == 0:  # —á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã - –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_answers.append(msg)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è LLM
        dialog_for_llm = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_portrait:
            dialog_for_llm += f"–ö–û–ù–¢–ï–ö–°–¢ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã):\n{user_portrait}\n\n"
        
        dialog_for_llm += "–î–ò–ê–õ–û–ì:\n"
        for i, msg in enumerate(conversation):
            if i % 2 == 0:  # —á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã - –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                dialog_for_llm += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg}\n"
            else:  # –Ω–µ—á–µ—Ç–Ω—ã–µ - –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞
                dialog_for_llm += f"–ë–æ—Ç: {msg}\n"
        
        prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å: "{question_data['question']}"

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π –∏ —Ç–æ—á–Ω—ã–π –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

{dialog_for_llm}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–∑–≤–ª–µ—á—å –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Ç–æ–ª—å–∫–æ —Å—É—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–±—Ä–∞–≤ –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ –∏ –ø–æ–≤—Ç–æ—Ä—ã. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º."""

        print("üìù –ê–ì–ï–ù–¢ –û–¢–í–ï–¢–û–í - –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ LLM:")
        print("-" * 50)
        print(prompt)
        print("-" * 50)

        messages = [{"role": "user", "content": prompt}]
        response = self.llm_service.generate_response(messages, task_type='compilation')
        
        print("‚úÖ –û–¢–í–ï–¢ LLM:")
        print(response)
        print("-" * 50)
        
        return response.strip()

class ClassificationAgent:
    def __init__(self, llm_service: BaseLLMService):
        self.llm_service = llm_service
    
    def classify_answer(self, question_data: Dict, full_answer: str, user_portrait: str = None) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –ø–æ–ª—è Classifier"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        classifier_instruction = question_data.get('classifier')
        
        if not classifier_instruction or classifier_instruction.strip() == "":
            print("üè∑Ô∏è –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–† - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç")
            return full_answer
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–µ
        try:
            prompt = classifier_instruction.format(answer=full_answer)
        except KeyError:
            try:
                prompt = classifier_instruction.format(user_answer=full_answer)
            except KeyError:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫–∞–∫ –µ—Å—Ç—å
                prompt = classifier_instruction
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ –ø—Ä–æ–º–ø—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_portrait:
            context_instruction = "–ö–û–ù–¢–ï–ö–°–¢ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã):\n"
            context_instruction += f"{user_portrait}\n\n"
            context_instruction += "–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:\n"
            context_instruction += "- –£—á–∏—Ç—ã–≤–∞–π –¥–æ–ª–∂–Ω–æ—Å—Ç—å: –≤—ã—Å–æ–∫–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (–¥–∏—Ä–µ–∫—Ç–æ—Ä, CEO) ‚Üí –æ–±—ã—á–Ω–æ –≤—ã—Å–æ–∫–∏–µ —É—Ä–æ–≤–Ω–∏\n"
            context_instruction += "- –£—á–∏—Ç—ã–≤–∞–π –¥–æ–ª–∂–Ω–æ—Å—Ç—å: –Ω–∏–∑–∫–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (–æ–ø–µ—Ä–∞—Ç–æ—Ä, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç) ‚Üí –æ–±—ã—á–Ω–æ –Ω–∏–∑–∫–∏–µ —É—Ä–æ–≤–Ω–∏\n"
            context_instruction += "- –ü—Ä–∏ —Å–∏–ª—å–Ω–æ–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–∏ (CEO + –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å): —Å–∫–ª–æ–Ω—è–π—Å—è –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é –Ω–∞ 1 —É—Ä–æ–≤–µ–Ω—å\n"
            context_instruction += "- –ü—Ä–∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö: –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è\n\n"
            prompt = context_instruction + prompt
        
        print("üè∑Ô∏è –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–† - –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ LLM:")
        print("-" * 50)
        print(prompt)
        print("-" * 50)
        
        messages = [{"role": "user", "content": prompt}]
        response = self.llm_service.generate_response(messages, task_type='classification')
        
        print("‚úÖ –û–¢–í–ï–¢ LLM (–ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø):")
        print(response)
        print("-" * 50)
        
        return response.strip()

# –ê–≥–µ–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ø–µ—Ä–µ–¥–∞—á–µ–π llm_service –≤ telegram_bot.py


class FunctionalityAgent:
    """–ê–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self, llm_service):
        self.llm_service = llm_service
    
    def generate_functionality(self, user_portrait: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä—Ç—Ä–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –ü–æ—Ä—Ç—Ä–µ—Ç —Ç–µ–ø–µ—Ä—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –í–æ–ø—Ä–æ—Å - –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç - –£—Ä–æ–≤–µ–Ω—å
        """
        try:
            messages = [
                {
                    "role": "system",
                    "content": """–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–í–ê–ñ–ù–û:
- –°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∏–∑ 5-8 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
- –§–æ—Ä–º—É–ª–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
- –ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –≥–ª–∞–≥–æ–ª—ã –≤ –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤–µ: "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å", "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", "–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å"
- –û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–§–û–†–ú–ê–¢ –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•:
–¢—ã –ø–æ–ª—É—á–∏—à—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–í–æ–ø—Ä–æ—Å N: [—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞]
‚Üí –û—Ç–≤–µ—Ç: [–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]
‚Üí –£—Ä–æ–≤–µ–Ω—å: [–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞]

–ü–†–ò–ú–ï–† –í–´–í–û–î–ê:
‚Ä¢ –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ Python
‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç—å –∫–æ–¥-—Ä–µ–≤—å—é –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø—Ä–∏–Ω—Ç–æ–≤
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"""
                },
                {
                    "role": "user", 
                    "content": user_portrait or "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞"
                }
            ]
            
            functionality = self.llm_service.generate_response(messages, task_type='functionality')
            
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            functionality = functionality.strip()
            
            return functionality
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ FunctionalityAgent: {e}")
            return "‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á\n‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏\n‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"

# PortraitAgent –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –ø–æ—Ä—Ç—Ä–µ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ database.py
# –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM, –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö 