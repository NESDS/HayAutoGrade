from typing import Dict, List, Tuple
from llm_service import llm_service

class VerificationAgent:
    def process_answer(self, question_data: Dict, user_answer: str, conversation: List[str]) -> Tuple[bool, str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ + —É—Ç–æ—á–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
        dialog_text = "–î–ò–ê–õ–û–ì:\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞
        dialog_text += f"–ë–æ—Ç: {question_data['question']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å –¥–∏–∞–ª–æ–≥ (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –≤ conversation)
        for i, msg in enumerate(conversation):
            if i % 2 == 0:  # —á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã - –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                dialog_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg}\n"
            else:  # –Ω–µ—á–µ—Ç–Ω—ã–µ - –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞
                dialog_text += f"–ë–æ—Ç: {msg}\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥
        prompt = question_data['verification_instruction'].format(user_answer=dialog_text)

        print("üîç –í–ï–†–ò–§–ò–ö–ê–¢–û–† - –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ LLM:")
        print("-" * 50)
        print(prompt)
        print("-" * 50)
        
        messages = [{"role": "user", "content": prompt}]
        response = llm_service.generate_response(messages)
        
        print("‚úÖ –û–¢–í–ï–¢ LLM:")
        print(response)
        print("-" * 50)
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥
        if "–ü–†–ò–ù–Ø–¢–û" in response.upper():
            return True, "–û—Ç–ª–∏—á–Ω–æ!"
        else:
            return False, response.replace("–£–¢–û–ß–ù–ò:", "").strip()

class AnswerCompilerAgent:
    def create_full_answer(self, question_data: Dict, conversation: List[str]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        user_answers = []
        for i, msg in enumerate(conversation):
            if i % 2 == 0:  # —á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã - –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_answers.append(msg)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è LLM
        dialog_for_llm = "–î–ò–ê–õ–û–ì:\n"
        for i, msg in enumerate(conversation):
            if i % 2 == 0:  # —á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã - –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                dialog_for_llm += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg}\n"
            else:  # –Ω–µ—á–µ—Ç–Ω—ã–µ - –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞
                dialog_for_llm += f"–ë–æ—Ç: {msg}\n"
        
        prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å: "{question_data['question']}"

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π –∏ —Ç–æ—á–Ω—ã–π –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

{dialog_for_llm}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–∑–≤–ª–µ—á—å –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Ç–æ–ª—å–∫–æ —Å—É—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–±—Ä–∞–≤ –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ –∏ –ø–æ–≤—Ç–æ—Ä—ã. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º."""

        print("üìù –ê–ì–ï–ù–¢ –û–¢–í–ï–¢–û–í - –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ LLM:")
        print("-" * 50)
        print(prompt)
        print("-" * 50)

        messages = [{"role": "user", "content": prompt}]
        response = llm_service.generate_response(messages)
        
        print("‚úÖ –û–¢–í–ï–¢ LLM:")
        print(response)
        print("-" * 50)
        
        return response.strip()

class ClassificationAgent:
    def classify_answer(self, question_data: Dict, full_answer: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –ø–æ–ª—è Classifier"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        classifier_instruction = question_data.get('classifier')
        
        if not classifier_instruction or classifier_instruction.strip() == "":
            print("üè∑Ô∏è –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–† - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç")
            return full_answer
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–µ
        try:
            prompt = classifier_instruction.format(answer=full_answer)
        except KeyError:
            try:
                prompt = classifier_instruction.format(user_answer=full_answer)
            except KeyError:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫–∞–∫ –µ—Å—Ç—å
                prompt = classifier_instruction
        
        print("üè∑Ô∏è –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–† - –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ LLM:")
        print("-" * 50)
        print(prompt)
        print("-" * 50)
        
        messages = [{"role": "user", "content": prompt}]
        response = llm_service.generate_response(messages)
        
        print("‚úÖ –û–¢–í–ï–¢ LLM (–ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø):")
        print(response)
        print("-" * 50)
        
        return response.strip()

verification_agent = VerificationAgent()
answer_agent = AnswerCompilerAgent()
classification_agent = ClassificationAgent() 