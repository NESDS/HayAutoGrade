#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ LLM —Å–µ—Ä–≤–∏—Å–∞–º–∏
"""

import requests
import uuid
from abc import ABC, abstractmethod
from typing import List, Dict

from config import (
    GIGACHAT_AUTH, GIGACHAT_SCOPE, GIGACHAT_API_URL, GIGACHAT_TOKEN_URL, GIGACHAT_MODEL,
    OPENAI_API_KEY, OPENAI_MODEL, OPENAI_API_URL,
    OPENAI_USE_PROXY, OPENAI_PROXY_HOST, OPENAI_PROXY_PORT, OPENAI_PROXY_USER, OPENAI_PROXY_PASSWORD,
    LLM_TASK_SETTINGS
)

class BaseLLMService(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö LLM —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    @abstractmethod
    def generate_response(self, messages: List[Dict], task_type: str = 'verification') -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM
            task_type: –¢–∏–ø –∑–∞–¥–∞—á–∏ ('verification', 'classification', 'compilation', 'explanation', 'functionality')
        """
        pass
    
    @property
    @abstractmethod
    def name(self) -> str:
        """–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞"""
        pass
    
    @property
    @abstractmethod
    def emoji(self) -> str:
        """–≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        pass

class GigaChatService(BaseLLMService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat"""
    
    @property
    def name(self) -> str:
        return "GigaChat"
    
    @property  
    def emoji(self) -> str:
        return "üá∑üá∫"
    
    def generate_response(self, messages: List[Dict], task_type: str = 'verification') -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –ì–∏–≥–∞–ß–∞—Ç —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            settings = LLM_TASK_SETTINGS.get(task_type, LLM_TASK_SETTINGS['verification'])
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            token_headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'application/json',
                'RqUID': str(uuid.uuid4()),
                'Authorization': f'Basic {GIGACHAT_AUTH}'
            }
            
            token_data = f'scope={GIGACHAT_SCOPE}'
            
            response = requests.post(GIGACHAT_TOKEN_URL, headers=token_headers, data=token_data, verify=False)
            response.raise_for_status()
            
            token_json = response.json()
            if 'access_token' not in token_json:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {token_json}")
                
            token = token_json['access_token']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            api_headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': f'Bearer {token}'
            }
            
            payload = {
                "model": GIGACHAT_MODEL,
                "messages": messages,
                "temperature": settings['temperature'],
                "max_tokens": settings['max_tokens'],
                "stream": False
            }
            
            response = requests.post(GIGACHAT_API_URL, headers=api_headers, json=payload, verify=False)
            response.raise_for_status()
            
            response_json = response.json()
            if 'choices' not in response_json or not response_json['choices']:
                raise Exception(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API: {response_json}")
                
            return response_json['choices'][0]['message']['content']
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ GigaChat API: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ GigaChat. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

class OpenAIService(BaseLLMService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI GPT"""
    
    @property
    def name(self) -> str:
        return "GPT-5"
    
    @property
    def emoji(self) -> str:
        return "üá∫üá∏"
    
    def generate_response(self, messages: List[Dict], task_type: str = 'verification') -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            settings = LLM_TASK_SETTINGS.get(task_type, LLM_TASK_SETTINGS['verification'])
            
            headers = {
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {OPENAI_API_KEY}'
            }
            
            payload = {
                "model": OPENAI_MODEL,
                "messages": messages,
                "temperature": settings['temperature'],
                "max_tokens": settings['max_tokens']
            }
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            proxies = None
            if OPENAI_USE_PROXY and OPENAI_PROXY_HOST and OPENAI_PROXY_PORT:
                proxy_url = f"http://{OPENAI_PROXY_USER}:{OPENAI_PROXY_PASSWORD}@{OPENAI_PROXY_HOST}:{OPENAI_PROXY_PORT}"
                proxies = {
                    "http": proxy_url,
                    "https": proxy_url
                }
                print(f"üåê OpenAI: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏ {OPENAI_PROXY_HOST}:{OPENAI_PROXY_PORT}")
            
            response = requests.post(OPENAI_API_URL, headers=headers, json=payload, proxies=proxies, timeout=60)
            response.raise_for_status()
            
            response_json = response.json()
            if 'choices' not in response_json or not response_json['choices']:
                raise Exception(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API: {response_json}")
                
            return response_json['choices'][0]['message']['content']
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ GPT-5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

class LLMFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è LLM —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    _services = {
        'gigachat': GigaChatService,
        'openai': OpenAIService
    }
    
    @classmethod
    def create_service(cls, service_type: str) -> BaseLLMService:
        """–°–æ–∑–¥–∞—Ç—å LLM —Å–µ—Ä–≤–∏—Å –ø–æ —Ç–∏–ø—É"""
        service_class = cls._services.get(service_type.lower())
        if service_class:
            return service_class()
        else:
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø LLM: {service_type}, –∏—Å–ø–æ–ª—å–∑—É–µ–º GigaChat")
            return GigaChatService()
    
    @classmethod
    def get_available_services(cls) -> Dict[str, BaseLLMService]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        return {name: service_class() for name, service_class in cls._services.items()}

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
llm_service = GigaChatService()
