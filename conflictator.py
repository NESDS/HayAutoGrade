#!/usr/bin/env python3
import sqlite3
from typing import List, Dict, Optional, Tuple
from database import Database

class ConflictDetector:
    """–ê–≥–µ–Ω—Ç –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–∞—Ö"""
    
    def __init__(self, db: Database):
        self.db = db
    
    def check_conflicts_after_answer(self, user_id: int, session_id: int, 
                                   answered_question: int, answer: str) -> List[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        """
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ Q{answered_question}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        user_responses = self.db.get_user_responses(user_id, session_id, only_active=True)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç {–Ω–æ–º–µ—Ä_–≤–æ–ø—Ä–æ—Å–∞: –Ω–æ–º–µ—Ä_–æ—Ç–≤–µ—Ç–∞}
        response_map = {}
        for resp in user_responses:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º final_answer –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ answer
            answer_text = resp['final_answer'] or resp['answer']
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ –Ω–æ–º–µ—Ä
                answer_num = int(answer_text) if answer_text and answer_text.isdigit() else None
                if answer_num:
                    response_map[resp['question']] = answer_num
            except (ValueError, TypeError):
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        conflicts = self._find_active_conflicts(response_map)
        
        if conflicts:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: –≤–æ–ø—Ä–æ—Å—ã {conflicts[0]['question_ids']}")
        
        return conflicts
    
    def _find_active_conflicts(self, response_map: Dict[int, int]) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
        with sqlite3.connect(self.db.db_path) as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
            cursor.execute("""
                SELECT id, question1_id, answer1_id, question1_text, answer1_text,
                       question2_id, answer2_id, question2_text, answer2_text,
                       question3_id, answer3_id, question3_text, answer3_text
                FROM conflicts
            """)
            
            all_conflicts = cursor.fetchall()
            active_conflicts = []
            
            for conflict_row in all_conflicts:
                conflict_id = conflict_row[0]
                q1_id, a1_id = conflict_row[1], conflict_row[2]
                q2_id, a2_id = conflict_row[5], conflict_row[6]
                q3_id, a3_id = conflict_row[9], conflict_row[10]
                
                conflict = {
                    'id': conflict_id,
                    'questions': [],
                    'question_ids': []
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)
                q1_text, a1_text = conflict_row[3], conflict_row[4]
                
                user_answer_1 = response_map.get(q1_id)
                if user_answer_1 != a1_id:
                    continue  # –ü–µ—Ä–≤–æ–µ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                
                conflict['questions'].append({
                    'question_id': q1_id,
                    'answer_id': a1_id,
                    'question_text': q1_text,
                    'answer_text': a1_text
                })
                conflict['question_ids'].append(q1_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—É—é –ø–∞—Ä—É (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)
                q2_text, a2_text = conflict_row[7], conflict_row[8]
                
                user_answer_2 = response_map.get(q2_id)
                if user_answer_2 != a2_id:
                    continue  # –í—Ç–æ—Ä–æ–µ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                
                conflict['questions'].append({
                    'question_id': q2_id,
                    'answer_id': a2_id,
                    'question_text': q2_text,
                    'answer_text': a2_text
                })
                conflict['question_ids'].append(q2_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ—Ç—å—é –ø–∞—Ä—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)
                if q3_id is not None and a3_id is not None:
                    q3_text, a3_text = conflict_row[11], conflict_row[12]
                    
                    user_answer_3 = response_map.get(q3_id)
                    if user_answer_3 != a3_id:
                        continue  # –¢—Ä–µ—Ç—å–µ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                    
                    conflict['questions'].append({
                        'question_id': q3_id,
                        'answer_id': a3_id,
                        'question_text': q3_text,
                        'answer_text': a3_text
                    })
                    conflict['question_ids'].append(q3_id)
                
                # –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω
                active_conflicts.append(conflict)
            
            return active_conflicts
    
    def generate_conflict_explanation(self, conflict: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞"""
        
        prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –≤ –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö –æ—Ü–µ–Ω–∫–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.

–ü–†–û–¢–ò–í–û–†–ï–ß–ò–í–´–ï –û–¢–í–ï–¢–´:
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        for i, question in enumerate(conflict['questions'], 1):
            prompt += f"‚Ä¢ –ö—Ä–∏—Ç–µ—Ä–∏–π {i}: {question['question_text']}\n"
            prompt += f"  –í—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ¬´{question['answer_text']}¬ª\n\n"
        
        prompt += """–ó–ê–î–ê–ß–ê:
1. –û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –ø–æ—á–µ–º—É —ç—Ç–∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É
2. –ü—Ä–∏–≤–µ–¥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏
3. –ü—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üîç –û–ë–ù–ê–†–£–ñ–ï–ù–û –ü–†–û–¢–ò–í–û–†–ï–ß–ò–ï:
[–ü—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è]

üí° –ü–†–ò–ú–ï–†:
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏]

üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã. –ü–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã –¥–ª—è —ç—Ç–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.

–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."""
        
        return prompt
    
    def get_conflicted_question_ids(self, conflicts: List[Dict]) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤–æ–ø—Ä–æ—Å–æ–≤, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö"""
        question_ids = set()
        for conflict in conflicts:
            question_ids.update(conflict['question_ids'])
        return list(question_ids)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç
    db = Database()
    detector = ConflictDetector(db)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_responses = {11: 3, 12: 1}  # –í–æ–∑–º–æ–∂–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç
    conflicts = detector._find_active_conflicts(test_responses)
    
    if conflicts:
        print(f"üî¥ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {len(conflicts)}")
        explanation = detector.generate_conflict_explanation(conflicts)
        print(f"üìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n{explanation}")
        
        conflicted_questions = detector.get_conflicted_question_ids(conflicts)
        print(f"üîÑ –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã: {conflicted_questions}")
    else:
        print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")